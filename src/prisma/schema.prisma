// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  phoneNumber String
  profileUrl  String?
  isDeleted   Boolean   @default(false)
  isBlocked   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  // Relations
  orders      Order[]
  reviews     Review[]
  addresses   Address[]
  favorites   Favorite[]
  role        Role      @default(CUSTOMER)
  cart        Cart?
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

model Product {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  price       Float
  imageUrl    String?
  isAvailable Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  isPopular   Boolean?  @default(false)

  
  // Relations
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  reviews     Review[]
  favorites   Favorite[]
  cartItems   CartItem[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  imageUrl    String?
  isDeleted   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  
  // Relations
  products    Product[]
}

model Order {
  id              String    @id @default(uuid())
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(UNPAID)
  paymentMethod   PaymentMethod?
  isDeleted       Boolean      @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  orderItems      OrderItem[]
  address         Address   @relation(fields: [addressId], references: [id])
  addressId       String
  payment         Payment[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
  PENDING
  FAILED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  UPI
}

model OrderItem {
  id          String    @id @default(uuid())
  quantity    Int
  unitPrice   Float
  subtotal    Float
  isDeleted   Boolean   @default(false)
  
  // Relations
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
}

model Payment {
  id                  String    @id @default(uuid())
  amount              Float
  currency            String    @default("INR")
  razorpayPaymentId   String?   @unique
  razorpayOrderId     String?   @unique
  razorpaySignature   String?
  status              PaymentStatus @default(UNPAID)
  method              PaymentMethod
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  
  // Relations
  order               Order     @relation(fields: [orderId], references: [id])
  orderId             String
}

model Review {
  id          String    @id @default(uuid())
  rating      Int
  comment     String?
  isDeleted   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
}

model Address {
  id          String    @id @default(uuid())
  street      String
  city        String
  state       String
  zipCode     String
  isDefault   Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  orders      Order[]
}

model Favorite {
  id        String   @id @default(uuid())
  created_at DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@unique([userId, productId])
}

model Promotion {
  id          String    @id @default(uuid())
  name        String
  description String
  discountPercent Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
}

model Cart {
  id          String    @id @default(uuid())
  isDeleted   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  cartItems   CartItem[]
}

model CartItem {
  id          String    @id @default(uuid())
  quantity    Int
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  
  // Relations
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String

  @@unique([cartId, productId])
}